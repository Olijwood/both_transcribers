 There's an issue in statistics I saw. So Spotify has maybe you can correct me, but over 50 million songs, tracks, and over 3 billion playlists. So 50 million songs and 3 billion playlists. 60 times more playlists. What do you make of that? The way I think about it is that from my statistician on machine learning, I'm  You have all these, if you want to think about reinforcement learning, you have this state space of all the tracks and you can take different journeys through this world. And I think of these as people helping themselves and each other creating interesting vectors through this space of tracks. And then it's not so surprising that across many tens of millions of kind of atomic units, there will be billions of paths that make sense.  And we're probably pretty quite far away from having found all of them. So kind of our job now is users, when Spotify started, it was really a search box that was for the time pretty powerful. And then I'd like to refer to this programming language called Playlisting, where if you, as you probably were pretty good at music, you knew your new releases, you knew your back-out log, you knew your start with the heaven, you could create a soundtrack for yourself using this Playlisting tool that's like meta programming language for music. So sounds like...  your life and people who work good at music is back to how do you scale the product. For people who are good at music that was actually enough. If you have the catalog in a good search tool and you can create your own sessions, you could create really good soundtrack for your entire life. Probably perfectly personalized because you did it yourself. But the problem was most people, many people aren't that good at music. They just can't spend the time. Even if you're very good at music, it's going to be hard to keep up. So what we did to try to scale this was to...  Essentially, try to build, you can think of them as agents that this friend that some people had that helped them navigate this music catalog. That's what we're trying to do for you. But also, there is something like 200 million active users on Spotify. So there, it's okay. So from the machine learning perspective, you have these 200 million people plus they're creating, it's really interesting.  I think to think of playlists as, I mean, I don't know if you meant it that way, but it's almost like a programming language. It's a release that trace of exploration of those individual agents, the listeners. And you have all this new tracks coming in. So it's a fascinating space that is ripe for machine learning. So is there, is it possible? How can...  Playlists be used as data in terms of machine learning and just to help spotify organized the music. So we found in our data, not surprising that people who play listed lots, they retain much better. They had a great experience. And so our first attempt was to playlist for users. And so we acquired this company called TuneGo of editors and professional playlists, and kind of leveraged the maximum of human intelligence.  to help build kind of these vectors through the track space for people. And that brought in the product. Then the obvious next, and we used statistical means where they could see when they created a playlist, how did that playlist perform? You know, they could see skips of the songs, they could see how the songs perform, and they manually iterated the playlist to maximize performance for a large group of people. But there were never enough editors to playlists for you personally. So the promise...  The machine learning was to go from group personalization, using editors and tools and statistics to individualization. And then what's so interesting about the three billion playlists we have is, and the truth is we lucked out. This was not a parrari strategy, as is often the case. It looks really smart and hindsight was dumb luck. We looked at these playlists, and we had some people in the company, a person named Eric Van Elton, and it was really good at machine learning.  already back in back then, like 2007, 2008, back then it was mostly collaborative filtering and so forth, but we realized that what this is is people are grouping tracks for themselves that have some semantic meaning to them and then they actually label it with a playlist name as well. So in a sense people were grouping tracks along semantic dimensions and labeling them and so could you use that information to find out that.  latent and adding. And so we started playing around with collaborative filtering and we saw tremendous success with it. Basically trying to extract some of these dimensions. And if you think about it, it's not surprising at all. It'd be quite surprising if playlists were actually random if they had no semantic meaning. For most people, they grouped these tracks for some reason. So we just happened across this incredible data set for people at home.  taking these tens of millions of tracks and grouped them along different semantic vectors. And as semantics being outside the individual users, it's from kind of universal. There's a universal embedding that holds across people on the surface. Yes, I do think that the embeddings you find are going to be reflective of the people who play less than. So if you have a lot of indie lovers who play less, your embedding is going to perform better there. But what we found was that yes.  There were these latent similarities. They were very powerful. And we had the, it was interesting because I think that the people who play this the most initially were the so-called music of hisianados who really into music. And they often had a certain, their taste was often, a certain gear towards a certain type of music. And so what's the price that if you look at the problem from the outside, you might expect that the algorithms would start  performing best with mainstreamers first because it somehow feels like an easier problem to solve mainstream taste. Then really particular taste was a complete opposite for us. The recommendations performed fantastically for people who saw themselves as having very unique taste. That's probably because all of them play less than and they didn't perform so well for mainstreamers. They actually thought they were a bit too particular and unorthodox. So we had a complete opposite of what we expected. Success within the hardest problem first and then had to try to scale... 